#cloud-config

ssh_authorized_keys:
  - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCraLh293buGTXU4MNziPADBl36zmuWjdgb6OXUZqvNScRy9CW1wJ0N4UDhOhmdCfRBBBwhHYFCVaVtgiVunAMztO7o1D8Kk4NybwYl+Z2C9q3LWA77NmQe8nqSzQJeC7KlW2rFQfVraM2X/rWCqEiV2HQyTiVOwuXCscSo7hpwyjLuT/XuNFkTtTaCXubLr2u3T+mg5H+bwqQp1YnQ2Msp7AZFmng016bL+77oFg9efewHvbMNQexxO13hwdfYvoYK3bD/0qoHNdCMQUGw7T2j13LacoTbtHfTUf8Rwp1aaDRI+ocenoSjO52sxoG8YAfeo+abSqCZUtj02Ub0zSIT

write-files:
  - path: /run/job-scheduler.env
    permissions: 0640
    content: |
      TAG="0.0.1"
      AWS_ACCESS_KEY="%AWS_ACCESS_KEY%"
      AWS_SECRET_ACCESS_KEY="%AWS_SECRET_ACCESS_KEY%"
      API_CMD="/data/run.sh"
      WORKER_CMD="celery -A api.celery worker --concurrency=5 --loglevel=info"

  - path: /run/job_scheduler_fetch_app.sh
    permissions: 0755
    content: |
      #!/bin/bash

      set -eof pipefail

      GIT_REPO=${REPO:-"https://github.com/dmatosl/job-scheduler.git"}
      TMP_DIR="/tmp/src"

      if [[ ! -d ${TMP_DIR} ]]; then
          mkdir -p /tmp/src
      fi

      pushd $TMP_DIR
          git clone ${GIT_REPO}
          [[ $? -eq 0 ]] && exit 0 || exit 1
      popd

  - path: /run/job_scheduler_build_app.sh
    permissions: 0755
    content: |
      #!/bin/bash

      set -eof pipefail

      APP_NAME=${APP:-"job-scheduler"}
      SRC_DIR=${APP_DIR:-"/tmp/src/job-scheduler"}
      TAG=${TAG:-"0.0.1"}

      pushd $SRC_DIR
          /usr/bin/docker build -t ${APP_NAME}:${TAG} .
      popd

coreos:
  units:
#    - name: docker-tls-tcp.socket
    - name: docker-tcp.socket
      command: start
      enable: true
      content: |
        [Unit]
        Description=Docker Secured Socket for the API

        [Socket]
        ListenStream=2376
        BindIPv6Only=both
        Service=docker.service

        [Install]
        WantedBy=sockets.target
    - name : job-scheduler-redis.service
      command: start
      enable: true
      content: |
        [Unit]
        Description=job-scheduler redis container
        After=docker.service

        [Service]
        Restart=always
        ExecStartPre=/usr/bin/docker pull redis:alpine
        ExecStart=/usr/bin/docker run -v /var/lib/redis:/data --name job-scheduler-redis redis:alpine
        ExecStop=/usr/bin/docker stop -t 2 job-scheduler-redis
        ExecStopPost=/usr/bin/docker rm -f job-scheduler-redis 2>&1

    - name: job-scheduler-builder.service
      command: start
      enable: true
      content: |
        [Unit]
        Description=job-scheduler app build image
        After=docker.service

        [Service]
        EnvironmentFile=/run/job-scheduler.env
        Type=oneshot
        ExecStart=/run/job_scheduler_fetch_app.sh
        ExecStart=/run/job_scheduler_build_app.sh

    - name : job-scheduler-worker.service
      command: start
      enable: true
      content: |
        [Unit]
        Description=job-scheduler-worker container
        After=job-scheduler-redis.service

        [Service]
        EnvironmentFile=/run/job-scheduler.env
        Restart=always
        ExecStart=/usr/bin/docker run --name job-scheduler-worker -e "AWS_ACCESS_KEY=${AWS_ACCESS_KEY}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" -e "REDIS_HOST=redis" -e "REDIS_PORT=6379"  --link job-scheduler-redis:redis job-scheduler:${TAG} $WORKER_CMD
        ExecStop=/usr/bin/docker stop -t 2 job-scheduler-worker
        ExecStopPost=/usr/bin/docker rm -f job-scheduler-worker 2>&1

    - name : job-scheduler-api.service
      command: start
      enable: true
      content: |
        [Unit]
        Description=job-scheduler-api container
        After=job-scheduler-redis.service

        [Service]
        EnvironmentFile=/run/job-scheduler.env
        Restart=always
        ExecStart=/usr/bin/docker run --name job-scheduler-api -p 80:8080 -e "AWS_ACCESS_KEY=${AWS_ACCESS_KEY}" -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" -e "REDIS_HOST=redis" -e "REDIS_PORT=6379"  --link job-scheduler-redis:redis job-scheduler:${TAG} $API_CMD
        ExecStop=/usr/bin/docker stop -t 2 job-scheduler-api
        ExecStopPost=/usr/bin/docker rm -f job-scheduler-api 2>&1

    - name: docker.service
      command: start
